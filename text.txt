type annotations for anonenous functions and arrow functions.
--------  anonenous ------------
let ann = function (name:string,age:number,country:string){
    return `My name: ${name} - My age ${age} - My country ${country}`
}
console.log(ann('anwar',21,'Egypt'));
----------- arrow --------------
let details = (num1:number,num2:number):number=>{
    return num1 + num2;
}
console.log(details(10,20));

===================================================================

type alias ---> you can use it in many times in the project
type st = string;
let user:st = 'anwar';
console.log(user);

///////
type buttons = {
    up:string,
    left:string,
    right:string,
    bottom:string,
}

function handlebtns (btns:buttons){
    return `the upper ${btns.up}
            the left  ${btns.left}
            the right ${btns.right}
            the bottom ${btns.bottom}`
}
console.log(handlebtns({up:"UP",left:"LEFT",right:"RIGHT",bottom:"BOTTOM"}));

type last = buttons & {
    x:boolean
}

litrials type --> custom the values of the function as (examples)
type transition_time_functions = "ease"|"ease-in"|"ease-out"|"ease-in-out"|"linear";

function transition (transition_name:string,transition_delay:number,transition_time:transition_time_functions)
{
    console.log(`The transition name is : ${transition_name}`);
    console.log(`The transition delay is : ${transition_delay}`);
    console.log(`The transition time functions is : ${transition_time}`);
}
console.log(transition('transform',1,"ease-in-out"));
----------------------------------------------------------------
Tuple ---> like an array but it is special how?
1- the number of elements known
2- the type of them known
3- the position of them known
we can add any elements in it
i can make it for readin only --- readonly ---- we can not add any elements in it.

the type void of the function:-
mean the function does not has the return values or it has return statement but it has not the values
function show ():void
{
    console.log("anwar");
    return;
}
console.log(show());
the type never of the function:-
the return does not contain the return statement and the code after it will not be reachable
function show2():never
{
    // while(true)
    // {
    //     console.log("anwar");
        
    // }
    // console.log();
    
    throw new Error("not found");
    console.log("my name is anwar");
    
    
}
console.log(show2());

--------------------------------------

enums --> it is data type for storing constant values can not be changed 
it has three types 
1- number
2- string
3- hetrogenous [number , string]
it has the basied numeric values start from 0 for the first element.

enum  languages {
    one = 'javasript',
    two = 'c++',
    three = 'typescript'
}
enum datas{
    my_name = "anwar",
    my_age = add(1,20),
    my_language = languages.two,
    my_expressions = 10+30*2,
    my_enum = datas.my_name
}
console.log(datas.my_name);
console.log(datas.my_age);
console.log(datas.my_language);
console.log(datas.my_expressions);
console.log(datas.my_enum);

---------------------------------------------

type assertions --> it convert the type from one type to another and ensures the element
* while using type assertions type script make the compiler not check the type at the compile time even it falue or true but it will check
in the run time

let num:any = 1000;
let newnum = Number.isInteger((num as number ));
console.log( newnum);

let str:any = "anwar";
let x = (str as string).repeat(3);
console.log(x);


let un:unknown = "anwar";
let y = <string>un;
console.log(y.repeat(3));

let image = <HTMLImageElement>document.getElementById('image');
console.log(image.src);
console.log(image.alt);

-----------------------------------------

uniontype and intersection type
the symbol for uniontype = |
the symbol for intersection type = &
intersection type -----> type combines many types 
